name: CalDAV 同步和 GitHub Pages 部署

on:
  # 每15分钟运行一次
  schedule:
    - cron: '*/15 * * * *'

  # 手动触发
  workflow_dispatch:
    inputs:
      sync_type:
        description: '同步类型'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - dingtalk
          - tencent
      cleanup_days:
        description: '清理多少天前的临时文件'
        required: false
        default: '7'
        type: string

  # 推送到main分支时触发（仅用于测试工作流）
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/**'
      - '*.py'
      - 'requirements.txt'

jobs:
  sync-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: Prod
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置 Python 环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'

    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 创建环境配置文件
      run: |
        cat > .env << EOF
        # 全局设置
        OUTPUT_DIR=calendar_events
        TIMEOUT=30

        # ICS 文件自定义名称
        ICS_FILE_NAME=${{ secrets.ICS_FILE_NAME || 'latest' }}

        # 钉钉账号配置
        DINGTALK_ACCOUNT_NAME=${{ secrets.DINGTALK_ACCOUNT_NAME }}
        DINGTALK_USERNAME=${{ secrets.DINGTALK_USERNAME }}
        DINGTALK_PASSWORD=${{ secrets.DINGTALK_PASSWORD }}
        DINGTALK_URL=${{ secrets.DINGTALK_URL }}
        DINGTALK_SYNC_DAYS_PAST=${{ secrets.DINGTALK_SYNC_DAYS_PAST || 90 }}
        DINGTALK_SYNC_DAYS_FUTURE=${{ secrets.DINGTALK_SYNC_DAYS_FUTURE || 90 }}

        # 腾讯会议账号配置
        TENCENT_ACCOUNT_NAME=${{ secrets.TENCENT_ACCOUNT_NAME }}
        TENCENT_USERNAME=${{ secrets.TENCENT_USERNAME }}
        TENCENT_PASSWORD=${{ secrets.TENCENT_PASSWORD }}
        TENCENT_URL=${{ secrets.TENCENT_URL }}
        TENCENT_SYNC_DAYS_PAST=${{ secrets.TENCENT_SYNC_DAYS_PAST || 90 }}
        TENCENT_SYNC_DAYS_FUTURE=${{ secrets.TENCENT_SYNC_DAYS_FUTURE || 90 }}
        EOF

    - name: 列出配置的账号
      run: |
        echo "=== 检查账号配置 ==="
        python main.py --list

    - name: 执行日历同步
      run: |
        echo "=== 开始日历同步 ==="
        if [ "${{ github.event.inputs.sync_type }}" = "dingtalk" ]; then
          echo "同步钉钉账号..."
          python main.py --sync-type dingtalk
        elif [ "${{ github.event.inputs.sync_type }}" = "tencent" ]; then
          echo "同步腾讯会议账号..."
          python main.py --sync-type tencent
        else
          echo "同步所有账号..."
          python main.py --sync-all
        fi

    - name: 合并ICS文件
      run: |
        echo "=== 开始合并ICS文件 ==="
        # 按类型合并
        python main.py --merge-type dingtalk || echo "钉钉合并失败或无数据"
        python main.py --merge-type tencent || echo "腾讯会议合并失败或无数据"

        # 全局合并
        python main.py --merge-all

    - name: 清理临时文件
      run: |
        echo "=== 清理临时文件 ==="
        CLEANUP_DAYS="${{ github.event.inputs.cleanup_days }}"
        if [ -z "$CLEANUP_DAYS" ]; then
          CLEANUP_DAYS=7
        fi
        python main.py --cleanup $CLEANUP_DAYS

    - name: 检查生成的文件
      run: |
        echo "=== 检查生成的文件 ==="
        echo "Public 目录内容:"
        ls -la public/ || echo "public 目录为空或不存在"

        echo "事件目录:"
        ls -la *_events_* || echo "没有事件目录"

    - name: 准备 GitHub Pages 内容
      run: |
        echo "=== 准备 GitHub Pages 内容 ==="

        # 创建 GitHub Pages 根目录
        mkdir -p _site

        # 复制 public 目录下的所有文件到 _site
        if [ -d "public" ] && [ "$(ls -A public)" ]; then
          cp -r public/* _site/
          echo "已复制 public 目录内容到 _site"
        else
          echo "public 目录为空，创建默认页面"
          echo "<h1>CalDAV 同步工具</h1><p>暂无日历数据</p>" > _site/index.html
        fi

        # 生成文件列表 JSON
        echo "=== 生成文件列表 JSON ==="
        python3 << 'PYTHON'
        import json
        import os
        import glob
        from datetime import datetime

        files_data = {
            "generated_at": datetime.utcnow().isoformat() + "Z",
            "calendar_files": []
        }

        # 扫描 public 目录下的所有 .ics 文件
        all_files = glob.glob("_site/*.ics")
        for file_path in all_files:
            filename = os.path.basename(file_path)
            file_size = os.path.getsize(file_path)
            file_mtime = os.path.getmtime(file_path)

            description = "未知日历"
            if filename.startswith("all_calendars_"):
                description = "包含所有账号的合并日历数据"
            elif filename.startswith("dingtalk_"):
                description = "仅包含钉钉日历数据"
            elif filename.startswith("tencent_"):
                description = "仅包含腾讯会议日历数据"

            files_data["calendar_files"].append({
                "filename": filename,
                "size": file_size,
                "modified": datetime.fromtimestamp(file_mtime).isoformat() + "Z",
                "description": description
            })

        # 按文件名排序，all_calendars 开头的排在最前面
        files_data["calendar_files"].sort(key=lambda x: (not x['filename'].startswith('all_calendars_'), x['filename']))

        # 保存 JSON 文件
        with open("_site/files.json", "w", encoding="utf-8") as f:
            json.dump(files_data, f, ensure_ascii=False, indent=2)

        print(f"✅ 生成文件列表: {len(files_data['calendar_files'])} 个日历文件")
        PYTHON

        # 创建新的索引页面
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="zh-CN">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>CalDAV 同步工具 - 日历文件</title>
            <style>
                * { box-sizing: border-box; }
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    margin: 0;
                    padding: 20px;
                    background: #f0f2f5;
                    color: #333;
                }
                .container {
                    max-width: 900px;
                    margin: 20px auto;
                    background: white;
                    padding: 20px 40px;
                    border-radius: 12px;
                    box-shadow: 0 4px 20px rgba(0,0,0,0.08);
                }
                .header {
                    text-align: center;
                    margin-bottom: 30px;
                    padding-bottom: 20px;
                    border-bottom: 1px solid #e8e8e8;
                }
                h1 {
                    color: #1f1f1f;
                    margin: 0;
                    font-size: 2em;
                }
                .subtitle {
                    color: #595959;
                    font-size: 1em;
                    margin-top: 8px;
                }
                h2 {
                    color: #333;
                    margin: 30px 0 20px 0;
                    font-size: 1.3em;
                }
                .file-grid {
                    display: grid;
                    gap: 15px;
                }
                .file-card {
                    padding: 15px 20px;
                    background: #fafafa;
                    border-radius: 8px;
                    border: 1px solid #d9d9d9;
                    transition: all 0.2s ease-in-out;
                }
                .file-card:hover {
                    border-color: #40a9ff;
                    box-shadow: 0 2px 8px rgba(0,0,0,0.09);
                }
                .file-name a {
                    font-weight: 500;
                    font-size: 1.1em;
                    color: #1890ff;
                    text-decoration: none;
                }
                .file-name a:hover {
                    text-decoration: underline;
                }
                .description {
                    color: #595959;
                    margin: 5px 0 10px 0;
                    font-size: 0.9em;
                }
                .file-info {
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    font-size: 0.85em;
                    color: #8c8c8c;
                }
                .empty-state {
                    text-align: center;
                    padding: 40px;
                    color: #8c8c8c;
                    background: #fafafa;
                    border-radius: 8px;
                }
                .footer {
                    margin-top: 30px;
                    padding-top: 20px;
                    border-top: 1px solid #e8e8e8;
                    text-align: center;
                    color: #8c8c8c;
                    font-size: 0.9em;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>📅 CalDAV 日历文件</h1>
                    <div class="subtitle">由 CalDAV 同步工具自动生成</div>
                </div>

                <h2>所有日历文件</h2>
                <div class="file-grid" id="calendar-files">
                    <div class="loading">正在加载文件列表...</div>
                </div>

                <div class="footer">
                    <p>最后更新于: <span id="update-time"></span></p>
                </div>
            </div>

            <script>
                function formatFileSize(bytes) {
                    if (bytes === 0) return '0 B';
                    const k = 1024;
                    const sizes = ['B', 'KB', 'MB', 'GB'];
                    const i = Math.floor(Math.log(bytes) / Math.log(k));
                    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
                }

                function formatDate(dateString) {
                    const date = new Date(dateString);
                    return date.toLocaleString('zh-CN', { timeZone: 'Asia/Shanghai', hour12: false }).replace(/\//g, '-');
                }

                function createFileCard(file) {
                    return `
                        <div class="file-card">
                            <div class="file-name">
                                <a href="./${file.filename}" download>${file.filename}</a>
                            </div>
                            <div class="description">${file.description}</div>
                            <div class="file-info">
                                <span>${formatDate(file.modified)}</span>
                                <span>${formatFileSize(file.size)}</span>
                            </div>
                        </div>
                    `;
                }

                async function loadFileList() {
                    const container = document.getElementById('calendar-files');
                    try {
                        const response = await fetch('./files.json?cache_bust=' + new Date().getTime());
                        if (!response.ok) throw new Error('Network response was not ok');
                        const data = await response.json();

                        document.getElementById('update-time').textContent = formatDate(data.generated_at);

                        if (data.calendar_files && data.calendar_files.length > 0) {
                            container.innerHTML = data.calendar_files.map(createFileCard).join('');
                        } else {
                            container.innerHTML = '<div class="empty-state">暂无日历文件。</div>';
                        }
                    } catch (error) {
                        console.error('加载文件列表失败:', error);
                        container.innerHTML = '<div class="empty-state">无法加载文件列表，请稍后重试。</div>';
                    }
                }

                document.addEventListener('DOMContentLoaded', loadFileList);
            </script>
        </body>
        </html>
        EOF

        echo "GitHub Pages 内容准备完成"
        ls -la _site/

    - name: 设置 GitHub Pages
      uses: actions/configure-pages@v5

    - name: 上传 GitHub Pages 内容
      uses: actions/upload-pages-artifact@v3
      with:
        path: '_site'

    - name: 部署到 GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: 输出部署结果
      run: |
        echo "=== 部署完成 ==="
        echo "GitHub Pages URL: ${{ steps.deployment.outputs.page_url }}"
        echo "部署状态: 成功"

        # 显示最终的文件统计
        echo "=== 文件统计 ==="
        echo "Public 文件数量: $(find _site -name '*.ics' | wc -l)"
        echo "总文件大小: $(du -sh _site | cut -f1)"
