name: 仅部署 GitHub Pages

on:
  # 手动触发 - 仅部署现有的 public 文件到 GitHub Pages
  workflow_dispatch:
    inputs:
      message:
        description: '部署说明'
        required: false
        default: '手动部署现有文件'
        type: string

jobs:
  deploy-only:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 检查现有文件
      run: |
        echo "=== 检查现有文件 ==="
        echo "Public 目录内容:"
        ls -la public/ || echo "public 目录为空或不存在"

        echo "Merged 目录内容:"
        ls -la merged/ || echo "merged 目录为空或不存在"

    - name: 准备 GitHub Pages 内容
      run: |
        echo "=== 准备 GitHub Pages 内容 ==="
        echo "部署说明: ${{ github.event.inputs.message }}"

        # 创建 GitHub Pages 根目录
        mkdir -p _site

        # 复制 public 目录下的所有文件到 _site
        if [ -d "public" ] && [ "$(ls -A public)" ]; then
          cp -r public/* _site/
          echo "已复制 public 目录内容到 _site"
        else
          echo "public 目录为空，创建默认页面"
        fi

        # 复制 merged 目录到 _site/merged（可选）
        if [ -d "merged" ] && [ "$(ls -A merged)" ]; then
          mkdir -p _site/merged
          cp -r merged/* _site/merged/
          echo "已复制 merged 目录内容"
        fi

        # 创建或更新索引页面
        cat > _site/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="zh-CN">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>CalDAV 同步工具 - 日历文件</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    margin: 0;
                    padding: 40px;
                    background: #f8f9fa;
                    color: #333;
                }
                .container {
                    max-width: 900px;
                    margin: 0 auto;
                    background: white;
                    padding: 40px;
                    border-radius: 10px;
                    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
                }
                h1 { color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }
                h2 { color: #34495e; margin-top: 30px; }
                .file-list { list-style: none; padding: 0; }
                .file-list li {
                    margin: 15px 0;
                    padding: 15px;
                    background: #f8f9fa;
                    border-radius: 8px;
                    border-left: 4px solid #3498db;
                    transition: all 0.3s ease;
                }
                .file-list li:hover {
                    background: #e9ecef;
                    transform: translateX(5px);
                }
                .file-list a {
                    text-decoration: none;
                    color: #2980b9;
                    font-weight: 600;
                    font-size: 1.1em;
                }
                .file-list a:hover { text-decoration: underline; }
                .timestamp {
                    color: #7f8c8d;
                    font-size: 0.9em;
                    background: #ecf0f1;
                    padding: 15px;
                    border-radius: 5px;
                    margin-top: 30px;
                }
                .description { color: #555; margin-top: 8px; font-size: 0.95em; }
                .status {
                    display: inline-block;
                    padding: 4px 12px;
                    background: #27ae60;
                    color: white;
                    border-radius: 20px;
                    font-size: 0.8em;
                    margin-left: 10px;
                }
                .empty-state {
                    text-align: center;
                    padding: 40px;
                    color: #7f8c8d;
                    font-style: italic;
                }
                .github-link {
                    display: inline-block;
                    margin-top: 20px;
                    padding: 10px 20px;
                    background: #333;
                    color: white;
                    text-decoration: none;
                    border-radius: 5px;
                    transition: background 0.3s ease;
                }
                .github-link:hover {
                    background: #555;
                    color: white;
                    text-decoration: none;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>📅 CalDAV 同步工具 - 日历文件</h1>
                <p>这里是自动同步的日历文件，包含钉钉和腾讯会议的日历数据。</p>

                <h2>🌐 全局合并日历文件</h2>
                <ul class="file-list" id="calendar-files">
                    <li class="empty-state">正在检查文件...</li>
                </ul>

                <h2>📋 按类型分类的日历文件</h2>
                <ul class="file-list" id="merged-files">
                    <li class="empty-state">正在检查文件...</li>
                </ul>

                <div class="timestamp">
                    <p><strong>最后更新时间:</strong> <span id="update-time"></span></p>
                    <p><strong>部署方式:</strong> GitHub Actions 自动部署</p>
                    <a href="https://github.com/your-username/sync-caldav-v3" class="github-link" target="_blank">
                        📂 查看源代码
                    </a>
                </div>
            </div>

            <script>
                // 设置更新时间
                document.getElementById('update-time').textContent = new Date().toLocaleString('zh-CN', {
                    year: 'numeric',
                    month: '2-digit',
                    day: '2-digit',
                    hour: '2-digit',
                    minute: '2-digit',
                    second: '2-digit'
                });

                // 检查文件是否存在的函数
                async function checkFileExists(filename) {
                    try {
                        const response = await fetch(filename, { method: 'HEAD' });
                        return response.ok;
                    } catch {
                        return false;
                    }
                }

                // 动态加载文件列表
                async function loadFileList() {
                    const calendarFiles = document.getElementById('calendar-files');
                    const mergedFiles = document.getElementById('merged-files');

                    // 清空加载状态
                    calendarFiles.innerHTML = '';
                    mergedFiles.innerHTML = '';

                    let foundCalendarFiles = false;
                    let foundMergedFiles = false;

                    // 检查常见的文件模式
                    const today = new Date();
                    const dateStr = today.getFullYear() +
                        String(today.getMonth() + 1).padStart(2, '0') +
                        String(today.getDate()).padStart(2, '0');

                    // 检查全局合并文件
                    const possibleCalendarFiles = [
                        `all_calendars_${dateStr}_*.ics`,
                        'all_calendars_latest.ics'
                    ];

                    // 检查按类型合并的文件
                    const possibleMergedFiles = [
                        `dingtalk_merged_${dateStr}_*.ics`,
                        `tencent_merged_${dateStr}_*.ics`,
                        'dingtalk_merged_latest.ics',
                        'tencent_merged_latest.ics'
                    ];

                    // 由于无法直接列出目录，我们创建一个通用的文件检查逻辑
                    // 实际部署时，可以通过服务器端脚本或构建时生成文件列表

                    if (!foundCalendarFiles) {
                        calendarFiles.innerHTML = `
                            <li class="empty-state">
                                暂无全局合并的日历文件。<br>
                                请运行同步工作流生成日历数据。
                            </li>
                        `;
                    }

                    if (!foundMergedFiles) {
                        mergedFiles.innerHTML = `
                            <li class="empty-state">
                                暂无按类型分类的日历文件。<br>
                                请运行同步工作流生成日历数据。
                            </li>
                        `;
                    }
                }

                // 页面加载完成后执行
                document.addEventListener('DOMContentLoaded', loadFileList);
            </script>
        </body>
        </html>
        EOF

        echo "GitHub Pages 内容准备完成"
        ls -la _site/

    - name: 设置 GitHub Pages
      uses: actions/configure-pages@v3

    - name: 上传 GitHub Pages 内容
      uses: actions/upload-pages-artifact@v2
      with:
        path: '_site'

    - name: 部署到 GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2

    - name: 输出部署结果
      run: |
        echo "=== 部署完成 ==="
        echo "GitHub Pages URL: ${{ steps.deployment.outputs.page_url }}"
        echo "部署说明: ${{ github.event.inputs.message }}"
        echo "部署状态: 成功"
