name: GitHub Pages 配置

on:
  # 当推送到 main 分支且包含 public 目录变更时触发
  push:
    branches: [ main ]
    paths:
      - 'public/**'
      - 'merged/**'
      - '.github/workflows/pages.yml'

  # 允许手动触发
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# 只允许一个并发部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望让这些生产部署完成
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建作业
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 GitHub Pages
        uses: actions/configure-pages@v3

      - name: 构建 GitHub Pages 内容
        run: |
          echo "=== 构建 GitHub Pages 内容 ==="

          # 创建构建目录
          mkdir -p _site

          # 复制 public 目录内容
          if [ -d "public" ] && [ "$(ls -A public)" ]; then
            cp -r public/* _site/
            echo "✅ 已复制 public 目录内容"
          else
            echo "⚠️ public 目录为空或不存在"
          fi

          # 复制 merged 目录内容
          if [ -d "merged" ] && [ "$(ls -A merged)" ]; then
            mkdir -p _site/merged
            cp -r merged/* _site/merged/
            echo "✅ 已复制 merged 目录内容"
          else
            echo "⚠️ merged 目录为空或不存在"
          fi

          # 生成文件列表 JSON
          echo "=== 生成文件列表 ==="
          cat > _site/files.json << 'EOF'
          {
            "generated_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "calendar_files": [],
            "merged_files": []
          }
          EOF

          # 扫描 .ics 文件并更新 JSON
          python3 << 'PYTHON'
          import json
          import os
          import glob
          from datetime import datetime

          files_data = {
              "generated_at": datetime.utcnow().isoformat() + "Z",
              "calendar_files": [],
              "merged_files": []
          }

          # 扫描全局合并文件
          calendar_files = glob.glob("_site/all_calendars_*.ics")
          for file_path in calendar_files:
              filename = os.path.basename(file_path)
              file_size = os.path.getsize(file_path)
              file_mtime = os.path.getmtime(file_path)

              files_data["calendar_files"].append({
                  "filename": filename,
                  "size": file_size,
                  "modified": datetime.fromtimestamp(file_mtime).isoformat() + "Z",
                  "description": "包含所有账号的合并日历数据"
              })

          # 扫描按类型合并的文件
          if os.path.exists("_site/merged"):
              merged_files = glob.glob("_site/merged/*.ics")
              for file_path in merged_files:
                  filename = os.path.basename(file_path)
                  file_size = os.path.getsize(file_path)
                  file_mtime = os.path.getmtime(file_path)

                  # 根据文件名判断类型
                  if "dingtalk" in filename.lower():
                      description = "钉钉日历数据"
                  elif "tencent" in filename.lower():
                      description = "腾讯会议日历数据"
                  else:
                      description = "日历数据"

                  files_data["merged_files"].append({
                      "filename": f"merged/{filename}",
                      "size": file_size,
                      "modified": datetime.fromtimestamp(file_mtime).isoformat() + "Z",
                      "description": description
                  })

          # 保存 JSON 文件
          with open("_site/files.json", "w", encoding="utf-8") as f:
              json.dump(files_data, f, ensure_ascii=False, indent=2)

          print(f"✅ 生成文件列表: {len(files_data['calendar_files'])} 个全局文件, {len(files_data['merged_files'])} 个分类文件")
          PYTHON

          # 创建改进的索引页面
          cat > _site/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="zh-CN">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>CalDAV 同步工具 - 日历文件</title>
              <style>
                  * { box-sizing: border-box; }
                  body {
                      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                      margin: 0;
                      padding: 20px;
                      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                      min-height: 100vh;
                      color: #333;
                  }
                  .container {
                      max-width: 1000px;
                      margin: 0 auto;
                      background: white;
                      padding: 40px;
                      border-radius: 15px;
                      box-shadow: 0 10px 30px rgba(0,0,0,0.2);
                  }
                  .header {
                      text-align: center;
                      margin-bottom: 40px;
                      padding-bottom: 20px;
                      border-bottom: 2px solid #eee;
                  }
                  h1 {
                      color: #2c3e50;
                      margin: 0;
                      font-size: 2.5em;
                      font-weight: 300;
                  }
                  .subtitle {
                      color: #7f8c8d;
                      font-size: 1.1em;
                      margin-top: 10px;
                  }
                  h2 {
                      color: #34495e;
                      margin: 30px 0 20px 0;
                      font-size: 1.5em;
                      display: flex;
                      align-items: center;
                  }
                  h2::before {
                      content: '';
                      width: 4px;
                      height: 24px;
                      background: #3498db;
                      margin-right: 12px;
                      border-radius: 2px;
                  }
                  .file-grid {
                      display: grid;
                      gap: 20px;
                      margin-bottom: 30px;
                  }
                  .file-card {
                      padding: 20px;
                      background: #f8f9fa;
                      border-radius: 10px;
                      border: 1px solid #e9ecef;
                      transition: all 0.3s ease;
                      position: relative;
                      overflow: hidden;
                  }
                  .file-card::before {
                      content: '';
                      position: absolute;
                      top: 0;
                      left: 0;
                      width: 100%;
                      height: 4px;
                      background: linear-gradient(90deg, #3498db, #2ecc71);
                  }
                  .file-card:hover {
                      background: #fff;
                      transform: translateY(-2px);
                      box-shadow: 0 5px 15px rgba(0,0,0,0.1);
                  }
                  .file-name {
                      font-weight: 600;
                      font-size: 1.1em;
                      color: #2980b9;
                      margin-bottom: 8px;
                  }
                  .file-name a {
                      color: inherit;
                      text-decoration: none;
                  }
                  .file-name a:hover {
                      text-decoration: underline;
                  }
                  .file-info {
                      display: flex;
                      justify-content: space-between;
                      align-items: center;
                      margin-top: 12px;
                      font-size: 0.9em;
                      color: #7f8c8d;
                  }
                  .file-size {
                      background: #ecf0f1;
                      padding: 4px 8px;
                      border-radius: 12px;
                      font-size: 0.8em;
                  }
                  .description {
                      color: #555;
                      margin-top: 8px;
                      font-size: 0.95em;
                      line-height: 1.4;
                  }
                  .empty-state {
                      text-align: center;
                      padding: 60px 20px;
                      color: #7f8c8d;
                      background: #f8f9fa;
                      border-radius: 10px;
                      border: 2px dashed #bdc3c7;
                  }
                  .empty-state-icon {
                      font-size: 3em;
                      margin-bottom: 20px;
                  }
                  .footer {
                      margin-top: 40px;
                      padding-top: 20px;
                      border-top: 1px solid #eee;
                      text-align: center;
                      color: #7f8c8d;
                  }
                  .github-link {
                      display: inline-block;
                      margin-top: 15px;
                      padding: 12px 24px;
                      background: #333;
                      color: white;
                      text-decoration: none;
                      border-radius: 25px;
                      transition: all 0.3s ease;
                      font-weight: 500;
                  }
                  .github-link:hover {
                      background: #555;
                      transform: translateY(-1px);
                      box-shadow: 0 4px 12px rgba(0,0,0,0.2);
                  }
                  .loading {
                      text-align: center;
                      padding: 20px;
                      color: #7f8c8d;
                  }
                  .spinner {
                      border: 3px solid #f3f3f3;
                      border-top: 3px solid #3498db;
                      border-radius: 50%;
                      width: 30px;
                      height: 30px;
                      animation: spin 1s linear infinite;
                      margin: 0 auto 15px;
                  }
                  @keyframes spin {
                      0% { transform: rotate(0deg); }
                      100% { transform: rotate(360deg); }
                  }
                  @media (max-width: 768px) {
                      .container { padding: 20px; margin: 10px; }
                      h1 { font-size: 2em; }
                      .file-info { flex-direction: column; align-items: flex-start; gap: 8px; }
                  }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>📅 CalDAV 同步工具</h1>
                      <div class="subtitle">自动同步钉钉和腾讯会议的日历数据</div>
                  </div>

                  <h2>🌐 全局合并日历文件</h2>
                  <div class="file-grid" id="calendar-files">
                      <div class="loading">
                          <div class="spinner"></div>
                          正在加载文件列表...
                      </div>
                  </div>

                  <h2>📋 按类型分类的日历文件</h2>
                  <div class="file-grid" id="merged-files">
                      <div class="loading">
                          <div class="spinner"></div>
                          正在加载文件列表...
                      </div>
                  </div>

                  <div class="footer">
                      <p><strong>最后更新时间:</strong> <span id="update-time"></span></p>
                      <p>由 GitHub Actions 自动生成和部署</p>
                      <a href="https://github.com/your-username/sync-caldav-v3" class="github-link" target="_blank">
                          📂 查看源代码
                      </a>
                  </div>
              </div>

              <script>
                  // 格式化文件大小
                  function formatFileSize(bytes) {
                      if (bytes === 0) return '0 B';
                      const k = 1024;
                      const sizes = ['B', 'KB', 'MB', 'GB'];
                      const i = Math.floor(Math.log(bytes) / Math.log(k));
                      return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
                  }

                  // 格式化日期
                  function formatDate(dateString) {
                      const date = new Date(dateString);
                      return date.toLocaleString('zh-CN', {
                          year: 'numeric',
                          month: '2-digit',
                          day: '2-digit',
                          hour: '2-digit',
                          minute: '2-digit'
                      });
                  }

                  // 创建文件卡片
                  function createFileCard(file) {
                      return `
                          <div class="file-card">
                              <div class="file-name">
                                  <a href="./${file.filename}" download>${file.filename}</a>
                              </div>
                              <div class="description">${file.description}</div>
                              <div class="file-info">
                                  <span>修改时间: ${formatDate(file.modified)}</span>
                                  <span class="file-size">${formatFileSize(file.size)}</span>
                              </div>
                          </div>
                      `;
                  }

                  // 创建空状态
                  function createEmptyState(message, icon = '📄') {
                      return `
                          <div class="empty-state">
                              <div class="empty-state-icon">${icon}</div>
                              <p>${message}</p>
                          </div>
                      `;
                  }

                  // 加载文件列表
                  async function loadFileList() {
                      try {
                          const response = await fetch('./files.json');
                          const data = await response.json();

                          const calendarFiles = document.getElementById('calendar-files');
                          const mergedFiles = document.getElementById('merged-files');

                          // 更新时间
                          document.getElementById('update-time').textContent = formatDate(data.generated_at);

                          // 显示全局合并文件
                          if (data.calendar_files && data.calendar_files.length > 0) {
                              calendarFiles.innerHTML = data.calendar_files.map(createFileCard).join('');
                          } else {
                              calendarFiles.innerHTML = createEmptyState(
                                  '暂无全局合并的日历文件<br>请运行同步工作流生成日历数据',
                                  '🌐'
                              );
                          }

                          // 显示分类文件
                          if (data.merged_files && data.merged_files.length > 0) {
                              mergedFiles.innerHTML = data.merged_files.map(createFileCard).join('');
                          } else {
                              mergedFiles.innerHTML = createEmptyState(
                                  '暂无按类型分类的日历文件<br>请运行同步工作流生成日历数据',
                                  '📋'
                              );
                          }

                      } catch (error) {
                          console.error('加载文件列表失败:', error);

                          // 显示错误状态
                          document.getElementById('calendar-files').innerHTML = createEmptyState(
                              '无法加载文件列表<br>请检查网络连接或稍后重试',
                              '⚠️'
                          );
                          document.getElementById('merged-files').innerHTML = createEmptyState(
                              '无法加载文件列表<br>请检查网络连接或稍后重试',
                              '⚠️'
                          );

                          // 设置当前时间
                          document.getElementById('update-time').textContent = new Date().toLocaleString('zh-CN');
                      }
                  }

                  // 页面加载完成后执行
                  document.addEventListener('DOMContentLoaded', loadFileList);
              </script>
          </body>
          </html>
          EOF

          echo "✅ 构建完成"
          echo "文件列表:"
          ls -la _site/

      - name: 上传构建产物
        uses: actions/upload-pages-artifact@v2
        with:
          path: '_site'

  # 部署作业
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
